:toc: macro
toc::[]
:idprefix:
:idseparator: -

== Setup Container Repository
The scope of this section is to setup/create a container registry with Docker Hub or AWS or Azure for allowing package pipeline to push container images. By the end of this guide, we will get the container registry name/url as an output.

* **Container Image Format:**

** `<registry-url>/<namespace>/<project>/<image>:<tag>`

*** `<registry-url>` : Container registry URL based on registry provider
*** `<namespace>` : Namespace within which the project is created
*** `<project>/<image>` : Repository name given on creation which can be from one level to three level deep (refer ghcr.io examples below)
*** `<tag>` : Some alphanumeric tag which is given as identifier

** **Examples:**

*** `docker.io/devonfw/devon4quarkus-reference:latest` : Docker Hub Registry format
*** `devonfw/my-thai-star-angular:latest` : Since Docker Hub is default, no need to specify `docker.io` as prefix
*** `ghcr.io/devonfw/my-thai-star-java:latest` : GitHub Container Registry format with one level of <project>/<image>
*** `ghcr.io/devonfw/my-thai-star/angular:1.5` : Repository name with two levels of <project>/<image>
*** `ghcr.io/devonfw/quarkus/sample/devon4quarkus-reference:2.0` : Repository name with three levels of <project>/<image>

== Prerequisites
* Docker Hub account is required to access Docker Hub Registry.
* AWS account and AWS CLI installation are required to access AWS Container Registry.
* Azure account and Azure CLI installation are required to access Azure Container Registry.

== Docker Hub
Docker Hub is a container registry/repository which is used to save container images.^[1]^ We will also demonstrate how to pull a container image from Docker Hub to your local machine, and then push a version with a tag back to your own repository.

* You will need a Docker Hub account. If you do not have one, please create one https://hub.docker.com/[here]. 
* Once you have a Docker Hub account, you can create a repository in just a few clicks in the https://hub.docker.com/repositories[link here]. First, click "Create Repository".
* Use the following command and login to Docker Hub account. You will see a message saying "Login Succeeded" after authenticating with Password.
[source,shell]
----
   docker login -u <username>
----
* Use the following command to pull the container image from Docker Hub to local machine.
* Pull the desired container images to our local repository with `docker pull` command.
[source,shell]
----
   docker pull <hostname>/<project-id>/<imagename>
----
* After making the necessary changes, tag the container image using the `docker tag` command.
* After tagging our container image, use `docker push` command to push the changes into the Docker Hub.
[source,shell]
----   
   docker tag <source-image> <hostname>/<project-id>/<image>
----
* Use the following command to push a container image to private repository.
[source,shell]
----
   docker push <hostname>/<project-id>/<imagename>
----
* Going back to our Docker Hub account, we can see the new tag stored in our private repository.
* Docker hub has no registry reference (<hostname>) since it is default whereas AWS, Azure, GCP, etc will have references like ecr.io, azr.io, gcr.io, etc.

== AWS Elastic Container Registry
* First, login to AWS ECR registry^[2]^ with the following command:

[source,shell]
----
   aws ecr get-login-password \
       --region <region> | docker login \
       --username AWS \
       --password-stdin <aws-account-id>.dkr.ecr.<region>.amazonaws.com
----

* Create a repository inside the specified namespace in the default registry for an account like in the example below:

[source,shell]
----
   aws ecr create-repository \ 
       --repository-name <project-id>/<image> \ 
       --region <region>
----

*Sample Output:*
[source,json]
----
   {
       "repository": { 
           "registryId": "123456789012",
           "repositoryName": "sample-repo",
           "repositoryArn": "arn:aws:ecr:us-east-1:123456789012:repository/project-a/nginx-web-app"
       }
   }
----


* Docker commands can be used for pulling, tagging and pushing container images as shown below.

[source,shell]
----
    docker pull <aws-account-id>.dkr.ecr.<region>.amazonaws.com/hello-world:latest
    docker tag hello-world:latest <aws-account-id>.dkr.ecr.<region>.amazonaws.com/hello-world:latest
    docker push <aws-account-id>.dkr.ecr.<region>.amazonaws.com/hello-world:latest
----


== Azure Container Registry
* https://docs.microsoft.com/en-us/azure/container-registry/container-registry-get-started-portal[ACR] is a private registry service from Azure Cloud^[3]^.
* Azure CLI commands start with "az" which is shown below for login.
* Registry can be created using the following command.

[source,shell]
----
   az acr create --resource-group <resourcegroup-name> --name <registry-name> --sku Basic
----

*Sample Output:*
[source,json]
----
{
  "adminUserEnabled": false,
  "creationDate": "2019-01-08T22:32:13.175925+00:00",
  "id": "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myContainerRegistry007",
  "location": "eastus",
  "loginServer": "mycontainerregistry007.azurecr.io",
  "name": "myContainerRegistry007",
  "provisioningState": "Succeeded",
  "resourceGroup": "myResourceGroup",
  "sku": {
    "name": "Basic",
    "tier": "Basic"
  },
  "status": null,
  "storageAccount": null,
  "tags": {},
  "type": "Microsoft.ContainerRegistry/registries"
}
----

* Docker commands can be used for pulling, tagging and pushing container images as shown below.

[source,shell]
----
   az acr login --name <registry-name>
   
   docker pull mcr.microsoft.com/hello-world
   docker tag mcr.microsoft.com/hello-world mycontainerregistry.azurecr.io/hello-world:v1.1.2
   docker push mycontainerregistry.azurecr.io/hello-world:v1.1.2
----

== References
* 1 - ^Docker (https://docs.docker.com/docker-hub/)
* 2 - ^AWS (https://docs.aws.amazon.com/ecr/)
* 3 - ^Azure (https://docs.microsoft.com/en-us/azure/container-registry/)
