:toc: macro
toc::[]
:idprefix:
:idseparator: -

== Setup Container Repository
The scope of this section is to setup/create a container registry with Docker Hub or AWS or Azure for allowing package pipeline to push container images. By the end of this guide, we will get the container registry name/url as an output.

A container image name generically has the following format:

* `<registry-url>/<namespace>/<image-name>:<tag>`

** `<registry-url>`: Container registry URL based on registry provider.
** `<namespace>`: Namespace within which the image is located.
** `<image-name>`: Repository/project/image name given on creation which can be from one level to n-level deep.
** `<tag>`: Some alphanumeric tag which is given as identifier.

== Docker Hub
=== Prerequisites
* Docker Hub account is required to access Docker Hub Registry. If you do not have one, please create one https://hub.docker.com/[here]. 

=== Steps
* In the Docker Hub https://hub.docker.com/repositories[homepage] (once you logged in), create a repository by clicking "Create Repository".
* Provide Name and Visibility for the repository and click "Create" button.

=== Image Format
For referencing an image in Docker Hub, you don't have to specify the `<registry-url>` since it is the default on Docker.

* `<namespace>/<image-name>:<tag>`

** `<namespace>`: Username or Organization on Docker Hub.
** `<image-name>`: Freely chosed project/image-name given by the user.
** `<tag>`: Some alphanumeric tag which is given as identifier.

==== Examples
*** `devonfw/my-thai-star-angular:latest`
*** `devonfw/my-thai-star/angular:1.5`
*** `devonfw/quarkus/sample/devon4quarkus-reference:2.0`

== AWS Elastic Container Registry

=== Prerequisites
* AWS account and AWS CLI installation are required.

=== Steps
* First, login to AWS ECR registry^[2]^ with the following command:

[source,shell]
----
   aws ecr get-login-password \
       --region <region> | docker login \
       --username AWS \
       --password-stdin <aws-account-id>.dkr.ecr.<region>.amazonaws.com
----

* Create a repository inside the specified namespace in the default registry for an account like in the example below:

[source,shell]
----
   aws ecr create-repository \ 
       --repository-name <project-id>/<image> \ 
       --region <region>
----

*Sample Output:*
[source,json]
----
   {
       "repository": { 
           "registryId": "123456789012",
           "repositoryName": "sample-repo",
           "repositoryArn": "arn:aws:ecr:us-east-1:123456789012:repository/project-a/nginx-web-app"
       }
   }
----


* Docker commands can be used for pulling, tagging and pushing container images as shown below.

[source,shell]
----
    docker pull <aws-account-id>.dkr.ecr.<region>.amazonaws.com/hello-world:latest
    docker tag hello-world:latest <aws-account-id>.dkr.ecr.<region>.amazonaws.com/hello-world:latest
    docker push <aws-account-id>.dkr.ecr.<region>.amazonaws.com/hello-world:latest
----


== Azure Container Registry

=== Prerequisites
* Azure account and Azure CLI installation are required.

=== Steps
* https://docs.microsoft.com/en-us/azure/container-registry/container-registry-get-started-portal[ACR] is a private registry service from Azure Cloud^[3]^.
* Azure CLI commands start with "az" which is shown below for login.
* Registry can be created using the following command.

[source,shell]
----
   az acr create --resource-group <resourcegroup-name> --name <registry-name> --sku Basic
----

*Sample Output:*
[source,json]
----
{
  "adminUserEnabled": false,
  "creationDate": "2019-01-08T22:32:13.175925+00:00",
  "id": "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myContainerRegistry007",
  "location": "eastus",
  "loginServer": "mycontainerregistry007.azurecr.io",
  "name": "myContainerRegistry007",
  "provisioningState": "Succeeded",
  "resourceGroup": "myResourceGroup",
  "sku": {
    "name": "Basic",
    "tier": "Basic"
  },
  "status": null,
  "storageAccount": null,
  "tags": {},
  "type": "Microsoft.ContainerRegistry/registries"
}
----

* Docker commands can be used for pulling, tagging and pushing container images as shown below.

[source,shell]
----
   az acr login --name <registry-name>
   
   docker pull mcr.microsoft.com/hello-world
   docker tag mcr.microsoft.com/hello-world mycontainerregistry.azurecr.io/hello-world:v1.1.2
   docker push mycontainerregistry.azurecr.io/hello-world:v1.1.2
----

== Provider Documentation
* link:https://docs.docker.com/docker-hub/[Docker Hub]
* link:https://docs.aws.amazon.com/ecr/[AWS ECR]
* link:https://docs.microsoft.com/en-us/azure/container-registry/[Azure ACR]
