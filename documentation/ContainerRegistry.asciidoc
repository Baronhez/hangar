:toc: macro
toc::[]
:idprefix:
:idseparator: -

== How to use Docker Hub?
Docker Hub is a container registry/repository which is used to save container/docker images. We will also demonstrate how to pull an image from Docker Hub to your local machine, and then push a version with a tag back to your own repository.

* *Step#1* - You will need a Docker Hub account. If you dont have one, please create one here - https://hub.docker.com/
* *Step#2* - Once you have a Docker Hub account, you can create a repository in just a few clicks at https://hub.docker.com/repositories. First, click "Create Repository"
* *Step#3* - Use the following command and login to Docker Hub account. You will see a message saying "Login Succeeded" after authenticating with Password.
[source,shell]
----
   docker login -u <username>
----
* *Step#4* - Use the following command to pull the docker container image from Docker Hub to local machine.
[source,shell]
----
   docker pull <username>/hello-world
----
* *Step#5* - Use the following command to push an image to private repository.
[source,shell]
----
   docker push <username>/<imagename>
----
- Example: 
[source,shell]
----
   docker images
   docker tag nodejssampleprj <username>/nodejssampleprj:v1.1.1.1
   docker images
   docker pull <username>/nodejssampleprj:v1.1.1.1
----
* Going back to our Docker Hub account, we can see the new tag is stored in our private repository [https://hub.docker.com/u/devonfw].

== Docker Pull/Push Commands
* Here are some optional commands which we would follow in any of our projects.

1. To pull the hello-world container to our local (or server from where we run this command), use *docker pull*.
2. After making the necessary code changes, we need to tag the container using *docker tag* command (before pushing it to the regitry).
3. After tagging the container, use *docker push* command to push the code changes to the registry.

[source,shell]
----
   docker pull HOSTNAME/PROJECT-ID/IMAGE
   docker tag SOURCE_IMAGE HOSTNAME/PROJECT-ID/IMAGE
   docker push HOSTNAME/PROJECT-ID/IMAGE
----

== AWS Elastic Container Registry
* First step, we need to login to our AWS Account using the following command (please replace *<aws-account-id>* and *<region>* as appliable).

[source,shell]
----
   aws ecr get-login-password \
       --region <region> | docker login \
       --username AWS \
       --password-stdin <aws-account-id>.dkr.ecr.<region>.amazonaws.com
----
* To create a repository

The following create-repository example creates a repository inside the specified namespace in the default registry for an account.

[source,shell]
----
   aws ecr create-repository \ 
       --repository-name project-a/nginx-web-app \ 
       --region us-west-2
----
* Output:
[source,json]
----
   {
       "repository": { 
           "registryId": "123456789012",
           "repositoryName": "sample-repo",
           "repositoryArn": "arn:aws:ecr:us-west-2:123456789012:repository/project-a/nginx-web-app"
       }
   }
----

Here are some optional commands which we would follow in any of our Docker projects.

* To pull the hello-world container to our local (or server from where we run this command), use this.
[source,shell]
----
    docker pull <aws-account-id>.dkr.ecr.<region>.amazonaws.com/hello-world:latest
----
* After making the necessary code changes, we need to tag the container using this command (before pushing it to the regitry).
[source,shell]
----
    docker tag hello-world:latest <aws-account-id>.dkr.ecr.<region>.amazonaws.com/hello-world:latest
----
* After tagging the container, use this command to push the code changes to the registry.
[source,shell]
----
    docker push <aws-account-id>.dkr.ecr.<region>.amazonaws.com/hello-world:latest
----
