= Setting up a Deploy Pipeline on Azure DevOps

In this section we will create a Deploy pipeline on Azure DevOps for deploying project to Amazon Elastic Kubernetes Service(EKS). This pipeline will be configured in order to be triggered every time a commit to the Azure DevOps repository is done, regardless of which branch it is made on.

The creation of this pipeline will follow the project workflow, so a new branch named `feature/deploy-pipeline` will be created, the YAML file for the pipeline and the manifests files for deploying into the cluster will be pushed to it.

Then, a Pull Request (PR) will be created in order to merge the new branch into the appropriate branch (provided in `-b` flag). The PR will be automatically merged if the repository policies are met. If the merge is not possible, either the PR URL will be shown as output, or it will be opened in your web browser if using `-w` flag.

The script located at `/scripts/pipelines/azure-devops/pipeline_generator.sh` will automatically create new branch, 

create a deploy pipeline based on a YAML template appropriate for the project manifests files, create the Pull Request, and if it is possible, merge this new branch into the specified branch.

== Prerequisites

* Download the `kubeconfig` context from the provision EKS pipeline output 'artifact', and create a service connection to kubernetes (Name this service connection `AWS-EKS-Connection`).

* Create a service connection to container registry to pull `Image` from registry (Name this service connection `Container-Reg-Connection`).  

* Have to get Nginx ingress controller DNS with the following command, and configure DNS into the `ingress` file to host, access application in publicly using DNS.

`Kubectl get svc svc nginx-ingress -n nginx-ingress`

* This script will commit and push the corresponding YAML template into your repository, so please be sure your local repository is up-to-date (i.e you have pulled the latest changes with `git pull`).

* [Optional] Having some knowledge about the application, in particular knowing if, when deployed, it produces a log file or some other blob (e.g. performance profiling data) interesting to be kept as an artifact.

== Creating the pipeline using provided script

=== Usage
```
pipeline_generator.sh \
  -c <config file path> \
  -n <pipeline name> \
  -d <project local path> \
  --manifests-path <manifestsPath> \
  --k8s-service-connection <k8s_service_connection> \
  --container-reg-connection <container-reg-connection> \
  --k8s-namespace <k8sNamespace> \
  [-b <branch>] \
  [-w]
```
NOTE:  The config file for the deploy pipeline is located at `/scripts/pipelines/azure-devops/templates/deploy/deploy-config.cfg`.

=== Flags
```
-c  --config-file     			[Required] Configuration file containing pipeline definition.
-n  --pipeline-name  			[Required] Name that will be set to the pipeline.
-d  --local-directory           [Required] Local directory of your project (the path should always be using '/' and not '\').
	--manifests-path            [Required] Name of the kubernetes manifest file."
    --k8s-service-connection	[Required] Name of the service connection to connect kubernetes cluster."
    --k8s-service-connection    [Required] Name of the service connection to container registry."
    --k8s-namespace               		   Name of the kubernetes Namespace."
-b  --target-branch              		   Name of the branch to which the Pull Request will target. PR is not created if the flag is not provided.
-w                                         Open the Pull Request on the web browser if it cannot be automatically merged. Requires -b flag.
```

=== Examples

==== Quarkus project

```
./pipeline_generator.sh -c ./templates/deploy/deploy-config.cfg -n quarkus-project-deploy -d C:/Users/$USERNAME/Desktop/quarkus-project -m manifestsPath -s AWS-EKS-Connection -r container-reg-connection -k k8sNamespace -b develop -w
```

CAUTION: Remember to write the path to the local repository with '/' and not '\' on Windows.