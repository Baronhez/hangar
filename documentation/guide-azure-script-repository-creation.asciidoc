:imagesdir: ./images/guide-azure-script-repository-creation
= Create a repository on Azure DevOps

This Guide is made to be able to create repository with command line and automatically, if you prefer using the Azure web interface, you can follow the guide under the name: *'tutorial-azure-manual-repository-creation'*

== Prerequisites
For this part we suppose you have git and Azure CLI installed on your computer.

If not, check these pages:

Azure CLI : https://docs.microsoft.com/en-us/cli/azure/install-azure-cli +
Git : https://git-scm.com/book/en/v2/Getting-Started-Installing-Git

NOTE: Here you will see two types of repository, git repositories and Azure repositories, it is important to know that Azure repositories are still git repositories, but in this documentation we will use Azure repository to talk about the one we want to create, and git repository is about any other git repository (it can be host on github, on your local computer, on another Azure project ...)

== Using the script to create your repository

There is a script called create_repo.bash (located in the folder scripts\repositories\azure-devops of the repository).


In this part we will explain how to use the script to create your repository.

It can be used in three different ways:

  - 1st case: Create an empty repository with just a README file and clone it to your computer into the directory you set (you can also use a sample application instead of an empty repository).

  - 2nd case: Import an existing git repository into your project (Note: all modifications made into your Azure repository will not apply into your git repository. As modification made into your git repository will not apply in your Azure repo), then clone this repo on your computer into the directory you set.

  - 3rd case: Convert a local folder into a git repository, then push this repository to your Azure project, works also if your folder is already a git repository, if it is just a local git repository it will add the remote origin url, if your git repository already has one configured, it will ask a confirmation to change it.


NOTE: For the first case, and the third case if your directory was not a git repository, the repository is created with already some branches and branch policies. You can of course personalize them if needed.


Use the 1st case if this is a brand new repository. +
Use the 2nd case if you already started your code and already pushed it into git, for example if you are migrating to Azure. +
Use the 3rd case if you already worked on local but have not pushed online your modifications or use it as an alternative for the second case (instead of using the URL we use the configuration on your computer).


=== Syntax +

```
  create_a_repo.ps1
      [-a <String>]
      [-n <String>]
      [-d <String>]
      [-o <String>]
      [-p <String>]
      [-g <String>]
      [-s {true/false}]
```

=== Arguments +

```
  -a (for action) :       (mandatory) The value of this will tell in which case the script must be executed, can be 'create' (1st case), 'import'(2nd case), 'push'(3rd case)
  -n (for name) :         (mandatory if the value of 'action' is 'create') Name the Azure repository will have
                  if not set for action 'import', it will used the name of the git repository you are trying to import (the one written in the url)
                  if not set for action 'push', it will used the name of the directory you will convert
  -d (for directory) :    (mandatory) Path of the directory where your repository will be clone (for the action 'create' and 'import'), or name of the folder you want to convert into a git repository (for the action 'push')
  -o (for organization) : URL of your Azure organization (mandatory)
  -p (for project) :      (mandatory) name of you Azure project
  -g (for giturl) :       (Mandatory if you choose the action import) URL of the git repository you want to clone
  -s (for sample) :       (default=false, and is only used with action 'create') can take true or false, if true a repository of a sample application will be created
```

==== Additional information

For the `-d`: The path can be relative or absolute. +

For the `-o`: Be careful, this parameter is not the name of your organization, but the URL of it.


== Usage


==== 1st case a: +
  `\path\to\script\create_a_repo.ps1 -action 'create' -directory . -organization \https://dev.azure.com/azure_organization -project azure_project -name repository_azure` +

This command creates a repository on Azure and clone it into our local directory, then it creates the necessary branches and branch policies (see after for more information).

==== 1st case b: +
  `\path\to\script\create_a_repo.ps1 -action 'create' -directory . -organization \https://dev.azure.com/azure_organization -project azure_project -name repository_azure -s true` +

This command has created a repository on Azure, it imported a sample repository of an application and then created the branches and policies.

==== 2nd case: +
  `\path\to\script\create_a_repo.ps1 -action 'import' -directory "C:\GIT_STORE" -organization  \https://dev.azure.com/azure_organization -project azure_project -name repository_import -giturl \https://github.com/elastic/examples.git` +

It will import all the content of the repository stored at that url \https://github.com/elastic/examples.git under the name 'repository_import', if no name would have been set, the repository would have been imported under the name 'examples' (it uses the url to know the name).
Then the repository is cloned inside the folder 'C:\GIT_STORE'. +

NOTE: Importing a git repository into Azure just import the content (branchs, files ...), but once the repository is imported there is no link between them ,any modification made on the original repo will not apply on your Azure project (and the other way around is also true) +

==== 3rd case: +
  `\path\to\script\create_a_repo.ps1 -action 'push' -directory .\repository_push -organization \https://dev.azure.com/azure_organization -project azure_project -name repository_push` +

If your folder .\repository_push is just a folder, it will convert it into a git repository, push it to your Azure project and create branches and branch policies (see after for more information). +

If your folder is a local git repository, it will just push it to your Azure project. +
If your folder is an online git repository, it will change the url so that next commits will be pushed into your Azure repository but not on the one already configured, and it will push all your branches at the new URL. +

=== Branches and policies

To ensure the quality of development, you will need to have a clean git workflow. For a new repository or when pushing a regular folder as your azure repository, we created a git workflow.

==== Branches

We created 3 branches:

===== "develop"

This is the branch containing all finished development waiting for validation, everytime you work on a new feature (or bug fix), you need to create a new branch, this branch must be created from *develop*, once your development is over, you can merge it into *develop* where validation tests will play on it. If these tests are succesful *develop* will be merged into *master*

===== "master"

This branch contains every validated development ready to be released. This is from this branch that we create release.

===== "feature/TEAM/featureName"

This branch is just for giving you an example of the template you can use for naming your feature branches.

NOTE: You should never commit directly on *develop* or *master*, modifications on *develop* should only come from merge of feature branches and modifications on *master* should only come from merge of *develop*.

==== Policies

You can define policies on your branches so you can secure them from commits not following certain rules. For example you can block squash merge.

Here are the policies we use as templates.

For the *develop* and *master* branch we have limited the type of merge that can be done.

===== master

image::master_policy.PNG[]

===== develop

image::develop_policy.PNG[]

===== Additional link

There are many other parameters you can use to define your branches policy, if you need to modify it, here is a link with more information about it. +
https://docs.microsoft.com/en-us/azure/devops/repos/git/branch-policies?view=azure-devops&tabs=browser
