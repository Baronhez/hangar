= Setting up a Package Pipeline on Azure DevOps

In this section we will create a package pipeline to build and push an image into a registry from an artefact we generated with a build pipeline. This pipeline will be configured to be triggered manually or triggered by a quality pipeline depending on the branch. +

NOTE: The package pipeline will failed if the quality pipeline executed on the same commit has failed.

The creation of the pipeline will follow the project workflow, so a new branch named `feature/package-pipeline` will be created and the YAML file for the pipeline will be pushed to it.

Then, a Pull Request (PR) will be created in order to merge the new branch into the appropriate branch (provided in `-b` flag). The PR will be automatically merged if the repository policies are met. If the merge is not possible, either the PR URL will be shown as output, or it will be opened in your web browser if using `-w` flag.

The script located at `/scripts/pipelines/azure-devops/pipeline_generator.sh` will automatically create this new branch, create a package pipeline based on a YAML template, create the Pull Request and, if it is possible, merge this new branch into the specified branch.

== Prerequisites

This script will commit and push the corresponding YAML template into your repository, so please be sure your local repository is up-to-date (i.e you have pulled latest changes with `git pull`).

== Creating the pipeline using provided script

=== Usage
```
./pipeline_generator.sh \
  -c, --config-file  <config file path> \
  -n, --pipeline-name <pipeline name> \
  -l, --language <language or framework> \
  -d, --local-directory <project local path> \
  -i, --image-name <image name>
  -u, --user <user>
  -p, --password <password>
  --build-pipeline-name <name_of_pipeline>
  --quality-pipeline-name <name_of_pipeline>
  [-b, --target-branch <branch>] \
  [-w]
```

NOTE: The config file for the build pipeline is located at `/scripts/pipelines/azure-devops/templates/build/build-config.cfg`.

=== Flags
```
-c, --config-file        [Required] Configuration file containing pipeline definition.
-n, --pipeline-name      [Required] Name that will be set to the pipeline.
-l, --language           [Required] Language or framework of the project.
-d, --local-directory    [Required] Local directory of your project (the path should always be using '/' and not '\').
-i, --image-name         [Required] Name of your image that will be push to a registry, this value must contain the full image name, <registry>/<path_of_repo>.
-u, --user               [Required] User that will be used to connect to the registry.
-p, --password           [Required] Password that will be used to connect to the registry.
--build-pipeline-name    [Required] Name of the build pipeline which has generated the artefact.
--quality-pipeline-name  [Required] Name of the quality pipeline that needs to be checked before the execution of the package pipeline.
-b, --target-branch                 Name of the branch to which the Pull Request will target. PR is not created if the flag is not provided.
-w                                  Open the Pull Request on the web browser if it cannot be automatically merged. Requires -b flag.
```

=== Examples

==== Quarkus project

```
./pipeline_generator.sh -c ./templates/package/package-config.cfg -n package-pipeline -l quarkus -d C:/path/to/project/quarkus-project -i docker.io/user/quarkus-project -u username -p password --build-pipeline-name build-pipeline --quality-pipeline-name quality-pipeline  -b develop -w
```

CAUTION: Remember to write the path to the local repository with '/' and not '\' on Windows.
