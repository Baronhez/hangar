= Setting up an AKS in Azure

In this section we will create a kubernetes cluster and all the necessary resources to deploy our application.

The kubernetes cluster will be created with a pipeline which we will generate with the script located at `/scripts/pipelines/azure-devops/pipeline_generator.sh` which will automatically create a new branch, the pipeline which will create the AKS, create a Pull Request, and if it possible, merge this branch into the specified branch.

== Prerequisites

* Install https://learn.hashicorp.com/tutorials/terraform/install-cli?in=terraform/aws-get-started[Terraform].
* Install https://docs.microsoft.com/en-us/cli/azure/?view=azure-cli-latest[Azure CLI].
* Install https://kubernetes.io/docs/tasks/tools/[kubectl].
* Install the https://marketplace.visualstudio.com/items?itemName=ms-devlabs.custom-terraform-tasks[Terraform extension] for Azure DevOps.
* Create a https://docs.microsoft.com/en-us/azure/devops/pipelines/library/service-endpoints?view=azure-devops&tabs=yaml#create-a-service-connection[service connection] to Azure Resource Manager (Name this service connection `aks-connection`).
* This script will commit and push the corresponding YAML template into your repository, so please be sure your local repository is up-to-date (i.e you have pulled the latest changes with `git pull`).

Before executing the script you will need to configure a `resource group` a `storage account` and a `storage container`. You can ask your project administrator to create these resources or you create them yourself executing the follwing commands:

Create a resource group:
```
az group create -n <resource group name> -l <location>
```

Create a storage account:
```
az storage account create -n <storage account name> -g <resource group name> -l <location>
```

NOTE: Set the same `<resource group name>` and `<location>` as when creating the resource group.

Create a storage container:
```
az storage container create -n <storage container name> --account-name <storage account name>
```

NOTE: Set the same `<storage account name>` as when creating the storage account.

== Creating the pipeline using provided script

Before executing the script to create the AKS cluster open the file `terraform.tfvars` located at `/scripts/environment-provisioning/azure-devops/aks` and modify the corresponding values with the resources created before and others needed (i.e cluster name, dns prefix,...).

=== Usage
```
pipeline_generator.sh \
  -c, --config-file <config file path> \
  -n, --pipeline-name <pipeline name> \
  --resource-group <resource group name> \
  --storage-account <storage account name> \
  --storage-container <storage container name> \
  -d, --local-directory <project local path> \
  [-b, --target-branch <branch>] \
  [-w]
```

=== Flags
```
-c, --config-file        [Required] Configuration file containing pipeline definition.
-n, --pipeline-name      [Required] Name that will be set to the pipeline.
    --resource-group     [Required] Name of the resource group for the cluster.
    --storage--account   [Required] Name of the storage account for the cluster.
    --storage-container  [Required] Name of the storage container where the tfstate file of the cluster will be stored.
-d, --local-directory    [Required] Local directory of your project (the path should always be using '/' and not '\').
-b, --target-branch                 Name of the branch to which the Pull Request will target. PR is not created if the flag is not provided.
-w                                  Open the Pull Request on the web browser if it cannot be automatically merged. Requires -b flag.
```

=== Example

```
./pipeline_generator.sh -c ./templates/aks/aks-config.cfg -n aks-provisioning --resource-group hangar-aks-rg --storage-account hangarstatefile --storage-container tfstatefile -d C:/Users/$USERNAME/Desktop/quarkus-project -b develop -w
```

=== Interacting with the cluster

In order to interact with your cluster download the artifact `kubeconfig` generated by the pipeline and execute the following command:

```
kubectl <kubectl command> --kubeconfig <path to downloaded kubeconfig>
```
