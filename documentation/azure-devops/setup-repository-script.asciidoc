:imagesdir: ./images/setup-repository-script
= Setting up a repository on Azure DevOps using script

By the end of this guide, a repository on Azure DevOps will be created in an automated way using a script. If you prefer using the Azure DevOps web interface, follow link:setup-repository-step-by-step.asciidoc[the step-by-step guide] instead.


== Prerequisites
. Have an Azure DevOps project already setup and Azure CLI installed and configured. If it is not the case, please go back to corresponding guide.

. Install https://git-scm.com/book/en/v2/Getting-Started-Installing-Git[Git].


== Creating repository using provided script


The script located at `/scripts/repositories/azure-devops/create-repo.sh` allows you to either:

. Create an empty repository with just a README file and clone it to your computer into the directory you set. Useful when starting a project from scratch.

. Import an already existing directory or Git repository into your project giving a path or an URL. Useful for taking to Azure DevOps the development of an existing project.
=== Syntax +

```
  create_repo.bash
      [-a <String>]
      [-n <String>]
      [-d <String>]
      [-o <String>]
      [-p <String>]
      [-g <String>]
      [-b <string>]
      [-r]
      [-s]
      [-f]
```

=== Flags

```
  -a, --action       [Required] Use case to fulfil: create, import.
  -n, --name         Name for the Azure DevOps repository. By default, the source repository or directory name (either new or existing, depending on use case) is used.
  -d, --directory    [Required] Path to the directory where your repository will be cloned or initialized.
  -o, --org  Name of the Azure DevOps organization (mandatory).
  -p, --project      (Mandatory) Name of the Azure DevOps project.
  -g, --source-git-url       Source URL of the Git repository to import.
  -b, --source-branch       Source branch to be used as a basis to initialize the repository on import, as master branch.
  -r, --remove-other-branches       When combined with -b (and possibly -s), removes any other remaining branch.
  -s, --setup-branch-strategy     Creates branches and policies required for the desired workflow. Requires -b on import. Accepted values: gitflow.
  -f, --force        Skips any user confirmation.
```

=== Typical use cases

TIP: This is non-exhaustive list. Make your own combination of flags if all of the following use cases does not fit your needs.

==== Creating an empty repository

  ./create-repo.sh -a create -o <organization> -p <project> -n <repository name> -d <local destination directory>

In case repository name is not specified, destination directory name will be used.

==== Creating an empty repository with Gitflow branching strategy

  ./create-repo.sh -a create -o <organization> -p <project> -n <repository name> -d <local destination directory> -s gitflow

==== Importing a remote Git repository

  ./create-repo.sh -a import -g <source git url> -o <organization> -p <project name> -n <repository name> -d <local destination directory>

In case repository name is not specified, source repository name (in URL) will be used.

==== Importing a specific remote Git repository branch as source for a new repository with Gitflow branching strategy

  ./create-repo.sh -a import -g <source git url> -b <source branch> -s gitflow -r -o <organization> -p <project name> -n <repository name> -d <local destination directory> 

This will create `master` (and `develop` since a branching strategy is specified) from the `<source branch>`, removing any other branch (including `<source branch>`).

==== Importing local directory or Git repository

  ./create-repo.sh -a import -d <local source directory> -o <organization> -p <project name> -n <repository name>

In case repository name is not specified, source directory name will be used.

==== Importing a specific local Git repository branch as source for a new repository with Gitflow branching strategy

  ./create-repo.sh -a 'import' -d <local source directory> -b <source branch> -s gitflow -r -o <organization> -p <project name> -n <repository name>

This will create `master` (and `develop` since a branching strategy is specified) from the `<source branch>`, removing any other branch (including `<source branch>`).

WARNING: This operation is destructive regarding branches on the local repository.

NOTE: Same command could also be used with a local directory, but then using `-b` and `-r` would be redundant.


== Branching strategies

To ensure the quality of development, it is crucial to keep a clean Git workflow. The following branching strategies are supported (using `-s` flag):

=== Gitflow

This is not an explanation of Gitflow (there are plenty of them on the web), but the actions performed by the script to help you start using this worflow.

==== Branches

* `master` is the initial (seed) branch. 
* `develop` branch is created from `master` branch.

Any other branch part the strategy (feature, release, and hotfix branches) will be created by developers during the lifecycle of the project.

=== Policies

You can define policies on your branches so you can secure them from commits not following certain rules. For example you can block squash merge.

Here are the policies we use as templates.

For the *develop* and *master* branch we have limited the type of merge that can be done.

==== master

image::master_policy.PNG[]

==== develop

image::develop_policy.PNG[]

==== Additional link

There are many other parameters you can use to define your branches policy, if you need to modify it, here is a link with more information about it. +
https://docs.microsoft.com/en-us/azure/devops/repos/git/branch-policies?view=azure-devops&tabs=browser
