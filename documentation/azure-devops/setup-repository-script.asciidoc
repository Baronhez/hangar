:imagesdir: ./images/setup-repository-script
= Setting up a repository on Azure DevOps using script

By the end of this guide, a repository on Azure DevOps will be created in an automated way using a script. If you prefer using the Azure DevOps web interface, follow link:setup-repository-step-by-step.asciidoc[the step-by-step guide] instead.


== Prerequisites
. Have an Azure DevOps project already setup and Azure CLI installed and configured. If it is not the case, please go back to corresponding guide.

. Install https://git-scm.com/book/en/v2/Getting-Started-Installing-Git[Git].


== Creating repository using provided script


The script located at `/scripts/repositories/azure-devops/create-repo.sh` allows you to either:

. Create an empty repository with just a README file and clone it to your computer into the directory you set. Useful when starting a project from scratch.

. Import an already existing directory or Git repository into your project giving a path or an URL. Useful for taking to Azure DevOps the development of an existing project.
=== Syntax +

```
  create_repo.bash
      [-a <String>]
      [-n <String>]
      [-d <String>]
      [-o <String>]
      [-p <String>]
      [-g <String>]
      [-b <string>]
      [-r]
      [-s]
      [-f]
```

=== Flags

```
  -a, --action       [Required] Use case to fulfil: create, import.
  -n, --name         Name for the Azure DevOps repository. By default, the source repository or directory name (either new or existing, depending on use case) is used.
  -d, --directory    [Required] Path to the directory where your repository will be cloned or initialized.
  -o (for organization) : URL of your Azure DevOps organization (mandatory)
  -p, --project      (Mandatory) Name of the Azure DevOps project.
  -g, --source-git-url       Source URL of the Git repository to import.
  -b (for branch) :       If you mention this parameter it will be used in the case you used the action 'import, it will import your repository as is but will create a master and develop branch from the branch you gave (if they already exists they will be replace, be careful), if you gave an URL it will import only the branch you gave and then create master and develop.
  -r (for remove) :       If you gave a branch as reference when importing an existing git repository, it will delete all other branches (except master and develop).
  -s (for strategy) :     Set this flag if you want the script to create branch policies with the template this script uses.
  -f, --force        Skips any user confirmation.
```

=== Typical use cases

TIP: This is non-exhaustive list. Make your own combination of flags if all of the following use cases does not fit your needs.

==== 1st case: Creating a new repo +

===== Subcase a +
  ./create_repo.bash -a 'create' -d <path to directory> -o https://dev.azure.com/<organization> -p <azure project> -n <repository name>


This command creates a repository on Azure DevOps and clones it into our local directory, it creates *develop* and *master* branches.


===== Subcase b +
  ./create_repo.bash -a 'create' -d <path to directory> -o https://dev.azure.com/<organization> -p <azure project> -n <repository name> -s


This command creates the repository and clones it the same way the Subcase *a* does it, then it creates the branch policies (see <<Branches and policies>> for more informations).

==== 2nd case: Importing a directory or a repository +
For the 2nd case, we will not give an exhaustive list of every combination of argument it is possible to use, but the list we give you will allow you to understand what you can do with them.

===== Subcase a +
  ./create_repo.bash -a 'import' -d <path to directory> -o  https://dev.azure.com/<organization> -p <project name> -n <repository name> -g <git url>

This will import all the content of the repository stored at that URL `<git url>` under the name *<repository name>*, if no name is set, the repository will be imported under the name *repository* (it uses the URL to know the name). +
Then the repository is cloned inside the folder *<path to directory>*. +

NOTE: Importing a Git repository into Azure DevOps just imports the content (branchs, files ...), but once the repository is imported there is no link between them, any modification made on the original repo will not apply on your Azure DevOps project (and the other way around is also true). +


===== Subcase b +
  ./create_repo.bash -a 'import' -d <path to directory>-o  https://dev.azure.com/<organization> -p <project name> -n <repository name> -g <git url> -b <reference branch> -s -r

This will first import the repository stored in the given URL the same way as it would in subcase *a*, then as a reference branch is given, it will create (or replace if they already exist) *master* and *develop* from this *<reference branch>*, then as the `-s` flag is set it will create the branch policies detailed here <<Branches and policies>>. As the `-r` flag is set, all branches except *<reference branch>*, *master* and *develop* will be deleted.


===== Subcase c: +
  ./create_repo.bash -a 'import' -d <path to directory> -o https://dev.azure.com/<organization> -p <project name> -n <repository name>

If your folder *<path to directory>* is just a folder, it will convert it into a Git repository, push it to your Azure DevOps project and create *master* and *develop* branches. +
If your folder is a local Git repository, it will just push it to your Azure DevOps project. +
If your folder is an online Git repository, it will change the remote URL so that future commits will be pushed into your Azure DevOps repository but not on the one already configured, and it will push all your branches at the new URL. +


===== Subcase d: +
  ./create_repo.bash -a 'import' -d <path to directory> -o https://dev.azure.com/<organization> -p <project name> -n <repository name> -b <reference branch> -r -s

If your folder *<path to directory>* is just a folder, it will act the exact same way as *2nd case c*. +
If your folder is a local Git repository, it will use *<reference branch>* to create *develop* and *master* (it will replace them if they already exists), delete all other branches that the 3 given before (`-r` is set), then it will just push it to your Azure DevOps project and create the policies defined below (`-s` is set). +
If your folder is an online Git repository, the branch *develop* and *master* will be created the same way as if it was a local git repository. Any other branch than *master*, *develop* and *<reference branch>* will be deleted (`-r`), then it will change the URL so that future commits will be pushed into your Azure DevOps repository but not on the one already configured, after that it will push all your branches at the new URL. Finally it will create the policies defined below (`-s`). +

NOTE: `-r` and `-s` are independent, you can use one without the other it will not affect their use, but they are both dependent to `-b`.

== Branching strategies

To ensure the quality of development, it is crucial to keep a clean Git workflow. The following branching strategies are supported (using `-s` flag):

=== Branches

We created 3 branches:

==== "develop"

This is the branch containing all finished development waiting for validation, every time you work on a new feature (or bug fix), you need to create a new branch, this branch must be created from *develop*, once your development is over, you can merge it into *develop* where validation tests will play on it. If these tests are successful, *develop* will be merged into *master*.


==== "master"

This branch contains every validated development ready to be released. It is from this branch we create release branches.


==== "feature/TEAM/featureName"

This branch is just for giving you an example of the template you can use for naming your feature branches.

NOTE: You should never commit directly on *develop* or *master*, modifications on *develop* should only come from merge of feature branches and modifications on *master* should only come from merge of *develop*.

=== Policies

You can define policies on your branches so you can secure them from commits not following certain rules. For example you can block squash merge.

Here are the policies we use as templates.

For the *develop* and *master* branch we have limited the type of merge that can be done.

==== master

image::master_policy.PNG[]

==== develop

image::develop_policy.PNG[]

==== Additional link

There are many other parameters you can use to define your branches policy, if you need to modify it, here is a link with more information about it. +
https://docs.microsoft.com/en-us/azure/devops/repos/git/branch-policies?view=azure-devops&tabs=browser
