:imagesdir: ./images/setup-repository-script
= Setting up a repository on Azure DevOps using script

In this section we will create a repository on Azure DevOps in an automated way using a script. If you prefer using the Azure DevOps web interface, follow link:setup-repository-step-by-step.asciidoc[the step-by-step tutorial] instead.

NOTE: Here you will see two types of repository, Git repositories and Azure repositories, it is important to know that Azure repositories are still Git repositories, but in this documentation we will use Azure repository to talk about the one we want to create, and Git repository is about any other Git repository (it can be host on Github, on your local computer, on another Azure project ...)

== Prerequisites
In this part of the guide, we assume you have setup the Azure DevOps project and have Azure CLI installed and configured. If it is not the case, please go back and do so.

Additionally, you will need Git. In case you don't have it already installed, please refer to the https://git-scm.com/book/en/v2/Getting-Started-Installing-Git[official installation documentation].

== Using the script to create the repository

The script is located at `scripts/repositories/azure-devops/create_repo.bash`.

It can be used in three different ways:

  - 1. Create an empty repository with just a README file and clone it to your computer into the directory you set.

  - 2. Import an already existing directory or Git repository into your project giving a path or an URL.


NOTE: For the first case, and the second case if your directory was not a Git repository, the repository is created with already some branches and branch policies. You can of course personalize them if needed.


Use the 1st case if this is a brand new repository. +
Use the 2nd case if you already started your code. +

=== Syntax +

```
  create_repo.bash
      [-a <String>]
      [-n <String>]
      [-d <String>]
      [-o <String>]
      [-p <String>]
      [-g <String>]
      [-b <string>]
```

=== Arguments +

```
  -a (for action) :       (mandatory) The value of this will tell in which case the script must be executed, can be 'create' (1st case), 'import'(2nd case), 'push'(3rd case)
  -n (for name) :         (mandatory if the value of 'action' is 'create') Name the Azure repository will have
                  if not set for action 'import', it will used the name of the Git repository you are trying to import or the name of the directory you will convert.
  -d (for directory) :    (mandatory) Name of the directory where your repository will be clone (for the action 'create' and 'import' if you gave an URL), or name of the folder you want to convert into a Git repository (for the action 'import' if you did not give an URL)
  -o (for organization) : URL of your Azure organization (mandatory)
  -p (for project) :      (mandatory) name of you Azure project
  -g (for giturl) :       (Mandatory if you choose the action import) URL of the Git repository you want to clone
  -b (for branch) :       If you mention this parameter it will be used in the case you used the action 'import' with an URL, instead of importing the whole repository (with the already existing branches and policies), it will just import the content of the branch you gave and create the branches and policies with a template this script has
```

==== Additional information

For the `-d`: The path can be relative or absolute. +

For the `-o`: Be careful, this parameter is not the name of your organization, but the URL of it.

When you use the second case, If the `-g` flag is set it will import the Git repository with the URL and clone your repository inside the path set with the `-d` flag, if the `-g` flag is not set it will import the directory set with the `-d` flag.

=== Usage


==== 1st case: +
  /path/to/script/create_repo.bash -a 'create' -d /path/to/directory -o https://dev.azure.com/azure_organization -p azure_project -n repository_azure

This command creates a repository on Azure and clones it into our local directory, then it creates the necessary branches and branch policies (see <<Branches and policies>> for more informations).

==== 2nd case a: +
  /path/to/script/create_repo.bash -a 'import' -d /path/to/directory -o  https://dev.azure.com/azure_organization -p azure_project -n repository_import -g https://github.com/user/repository.git

It will import all the content of the repository stored at that url `\https://github.com/user/repository.git` under the name *repository_import*, if no name would have been set, the repository would have been imported under the name *repository* (it uses the url to know the name). +
Then the repository is cloned inside the folder */path/to/directory*. +

NOTE: Importing a Git repository into Azure just import the content (branchs, files ...), but once the repository is imported there is no link between them , any modification made on the original repo will not apply on your Azure project (and the other way around is also true). +

==== 2nd case b: +
  /path/to/script/create_repo.bash -a 'import' -d /path/to/directory -o  https://dev.azure.com/azure_organization -p azure_project -n repository_import -g https://github.com/user/repository.git -b master

It will import the content of the branch master of the repository stored at that url `\https://github.com/user/repository.git` under the name *repository_import*, if no name would have been set, the repository would have been imported under the name *repository* (it uses the url to know the name). As we set the -b flag, it creates the branches and policies we defined in <<Branches and policies>>. +
Then the repository is cloned inside the folder */path/to/directory*. +

==== 2nd case c: +
  /path/to/script/create_repo.bash -a 'import' -d /path/to/directory/repository_push -o https://dev.azure.com/azure_organization -p azure_project -n repository_push

If your folder */path/to/directory/repository_push* is just a folder, it will convert it into a Git repository, push it to your Azure project and create branches and branch policies. +
If your folder is a local Git repository, it will just push it to your Azure project. +
If your folder is an online Git repository, it will change the url so that next commits will be pushed into your Azure repository but not on the one already configured, and it will push all your branches at the new URL. +

==== Sample application

A repository containing a sample application exists, if you want to import it to your project, use the `2nd case a` with the URL:

== Branches and policies

To ensure the quality of development, you will need to have a clean Git workflow. For a new repository or when pushing a regular folder as your Azure repository, we created a Git workflow.

=== Branches

We created 3 branches:

==== "develop"

This is the branch containing all finished development waiting for validation, every time you work on a new feature (or bug fix), you need to create a new branch, this branch must be created from *develop*, once your development is over, you can merge it into *develop* where validation tests will play on it. If these tests are successful, *develop* will be merged into *master*.


==== "master"

This branch contains every validated development ready to be released. It is from this branch we create release branches.


==== "feature/TEAM/featureName"

This branch is just for giving you an example of the template you can use for naming your feature branches.

NOTE: You should never commit directly on *develop* or *master*, modifications on *develop* should only come from merge of feature branches and modifications on *master* should only come from merge of *develop*.

=== Policies

You can define policies on your branches so you can secure them from commits not following certain rules. For example you can block squash merge.

Here are the policies we use as templates.

For the *develop* and *master* branch we have limited the type of merge that can be done.

==== master

image::master_policy.PNG[]

==== develop

image::develop_policy.PNG[]

==== Additional link

There are many other parameters you can use to define your branches policy, if you need to modify it, here is a link with more information about it. +
https://docs.microsoft.com/en-us/azure/devops/repos/git/branch-policies?view=azure-devops&tabs=browser
