= Setting up a Package Pipeline on Azure DevOps

In this section we will create a package pipeline to build and push an image into our container registry. This pipeline will be configured to be triggered manually or triggered by a quality pipeline depending on the branch.


NOTE: The package pipeline will fail if the quality pipeline executed on the same commit has failed.


The creation of the pipeline will follow the project workflow, so a new branch named `feature/package-pipeline` will be created and the YAML file for the pipeline will be pushed to it.

Then, a Pull Request (PR) will be created in order to merge the new branch into the appropriate branch (provided in `-b` flag). The PR will be automatically merged if the repository policies are met. If the merge is not possible, either the PR URL will be shown as output, or it will be opened in your web browser if using `-w` flag.

The script located at `/scripts/pipelines/azure-devops/pipeline_generator.sh` will automatically create this new branch, create a package pipeline based on a YAML template, create the Pull Request and, if it is possible, merge this new branch into the specified branch.

== Prerequisites

This script will commit and push the corresponding YAML template into your repository, so please be sure your local repository is up-to-date (i.e you have pulled latest changes with `git pull`).

== Creating the pipeline using provided script

=== Usage
```
pipeline_generator.sh \
  -c <config file path> \
  -n <pipeline name> \
  -l <language or framework> \
  --dockerfile <dockerfile path> \
  -d <project local path> \
  -i <image name> \
  -u <user> \
  -p <password> \
  --build-pipeline-name <build pipeline name> \
  --quality-pipeline-name <quality pipeline name> \
  [--aws-access-key <aws access key>] \
  [--aws-secret-access-key <aws secret access key>] \
  [--aws-region <aws region>] \
  [-b, --target-branch <branch>] \
  [-w]

```

NOTE: The config file for the package pipeline is located at `/scripts/pipelines/azure-devops/templates/package/package-pipeline.cfg`.


=== Flags
```
-c, --config-file              [Required] Configuration file containing pipeline definition.
-n, --pipeline-name            [Required] Name that will be set to the pipeline.
-l, --language                 [Required, if dockerfile not set] Language or framework of the project.
    --dockerfile               [Required, if language not set] Path to the Dockerfile, replace the one set with the language if both flags are given.
-d, --local-directory          [Required] Local directory of your project (the path should always be using '/' and not '\').
-i, --image-name               [Required] Name that will be given to the Docker image (It must contain the name of the registry and the name or path of the repository inside the registry).
-u, --user                     [Required if not using aws access key] User that will be used to connect to the registry.
-p, --password                 [Required if not using aws access key] Password that will be used to connect to the registry.
    --build-pipeline-name      [Required] Build pipeline name.
    --quality-pipeline-name    [Required] Quality pipeline name.
    --aws-access-key                      Access key to connect to your aws account (if this value is set, -u and -p will be ignored)."
    --aws-secret-access-key    [Required if --aws-access-key is used] Secret access key to connect to your AWS account."
    --aws-region               [Required if --aws-access-key is used] region for your AWS account."
-b, --target-branch                       Name of the branch to which the Pull Request will target. PR is not created if the flag is not provided.
-w                                        Open the Pull Request on the web browser if it cannot be automatically merged. Requires -b flag.
```

=== Examples

==== Quarkus project

```
./pipeline_generator.sh -c ./templates/package/package-pipeline.cfg -n quarkus-project-package -l quarkus -d C:/Users/$USERNAME/Desktop/quarkus-project -i docker.io/username/quarkus-project -u username -p password --build-pipeline-name quarkus-project-build --quality-pipeline-name quarkus-project-quality  -b develop -w

```

CAUTION: Remember to write the path to the local repository with '/' and not '\' on Windows.
