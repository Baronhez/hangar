= Setting up the Deploy Pipeline

In this section we will create a deploy pipeline on Azure DevOps to deploy the application on AWS EKS. 

The creation of the pipeline will follow the project workflow, so a new branch named `feature/deploy-pipeline` will be created, the YAML file for the pipeline and the manifests files for deploying into the cluster will be pushed to it.

Then, a Pull Request (PR) will be created in order to merge the new branch into the appropriate branch (provided in `-b` flag). The PR will be automatically merged if the repository policies are met. If the merge is not possible, either the PR URL will be shown as output, or it will be opened in your web browser if using `-w` flag.

The script located at `/scripts/pipelines/azure-devops/pipeline_generator.sh` will automatically create new branch,create a deploy pipeline based on a YAML template appropriate for the project manifests files, create the Pull Request, and if it is possible, merge this new branch into the specified branch.

== Prerequisites

* Download the `kubeconfig` context service connection name from the provision EKS pipeline output 'artifact'(Connect to the kubernetes cluster by using service connection name). 

* Download the DNS name of the nginx ingress controller, and set the DNS name as the host in your ingress YAML file.
 
* Create a service connection to your container registry (Name this service connection `Container-Reg-Connection`).   

* This script will commit and push the corresponding YAML template into your repository, so please be sure your local repository is up-to-date (i.e you have pulled the latest changes with `git pull`).

== Creating the pipeline using provided script

=== Usage
```
pipeline_generator.sh \
  -c <config file path> \
  -n <pipeline name> \
  -d <project local path> \
  --image-name <image-name> \
  --ingress-dns <ingress-dns> \
  --deploy-files <k8smanifests> \
  --k8s-service-connection <k8s_service_connection> \
  --Container-Reg-Connection <Container-Reg-Connection> \
  --k8s-namespace <k8sNamespace> \
  --package-pipeline-name <quality-pipeline-name> \
  [-b <branch>] \
  [-w]
```
NOTE:  The config file for the deploy pipeline is located at `/scripts/pipelines/azure-devops/templates/deploy/deploy-pipeline.cfg`.

=== Flags
```
-c  --config-file     [Required] Configuration file containing pipeline definition.
-n  --pipeline-name   [Required] Name that will be set to the pipeline.
-d  --local-directory [Required] Local directory of your project (the path should always be using '/' and not '\').
    --image-name      [Required] Image repository name."
    --ingress-dns     [Required] Nginx ingress controller DNS."
    --deploy-files    [Required] Path inside the remote repository where the deployment YAML files are located.
    --k8s-service-connection    [Required] Name of the service connection to connect kubernetes cluster."
    --Container-Reg-Connection  [Required] Name of the service connection to container registry."
    --k8s-namespace                        Name of the kubernetes Namespace."
    --package-pipeline-name                Package pipeline name."
-b  --target-branch                	       Name of the branch to which the Pull Request will target. PR is not created if the flag is not provided.
-w                                         Open the Pull Request on the web browser if it cannot be automatically merged. Requires -b flag.
```

=== Examples

==== Quarkus project

```
./pipeline_generator.sh -c ./templates/deploy/deploy-config.cfg -n quarkus-project-deploy -d C:/Users/$USERNAME/Desktop/quarkus-project --image-name image-repository-name --ingress-dns dns.name --deploy-files k8smanifests --k8s-service-connection AWS-EKS-Connection --Container-Reg-Connection Container-service-connection --k8s-namespace default --package-pipeline-name package-pipeline-name -b develop -w
```

CAUTION: Remember to write the path to the local repository with '/' and not '\' on Windows.
