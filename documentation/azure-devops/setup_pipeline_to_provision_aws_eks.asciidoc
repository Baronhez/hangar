:toc: macro
toc::[]
:idprefix:
:idseparator: -

= Setting up an EKS in AWS
In this section we will create a kubernetes cluster and all the necessary resources to deploy our application.

The kubernetes cluster will be created with a pipeline which we will generate with the script located at `/scripts/pipelines/azure-devops/pipeline_generator.sh` which will automatically create a new branch, the pipeline which will provision AWS EKS, create a Pull Request, and if it possible, merge this branch into the specified target branch.

=== Prerequisites
* Create a service connection in Azure DevOps https://docs.microsoft.com/en-us/azure/devops/pipelines/library/service-endpoints?view=azure-devops&tabs=yaml#create-a-service-connection[here]. Make sure the service connection name to be `AWS-Terraform-Connection`. If you need a specific connection name, please modify the same in `script_config.cfg`.
* Create AWS S3 Bucket https://docs.aws.amazon.com/AmazonS3/latest/userguide/create-bucket-overview.html[here] -  Bucket name and the path needs to be passed as parameter to the script while executing. You can create a folder and provide it as a path here. 
* Verify IAM user permissions https://github.com/devonfw/hangar/blob/master/documentation/aws/setup-aws-account-iam-for-eks.asciidoc#check-iam-user-permissions[here]
* https://kubernetes.io/docs/tasks/tools/[Install kubectl]
* This script will commit and push the corresponding YAML template into your repository, so please be sure your local repository is up-to-date (i.e you have pulled the latest changes with `git pull`).

== Creating the pipeline using provided script

* Before executing the script to create the AWS EKS cluster open the file `terraform.tfvars` located at `/scripts/environment-provisioning/azure-devops/eks` and modify the corresponding values with the resources created before and others needed (i.e cluster name..).
* The script will by default create a new AWS VPC with name `k8s-vpc`. However, if you wish to provision AWS EKS in your existing `VPC` please edit `existing_vpc_id` and `existing_vpc_private_subnets` with respective values.
* 

=== Usage
```
pipeline_generator.sh \
  -c, --config-file <config file path> \
  -n, --pipeline-name <pipeline name> \
  --s3-bucket <aws s3 bucket name> \
  --s3-key-path <s3 key path> \
  -d, --local-directory <project local path> \
  [-b, --target-branch <branch>] \
  [-w]
```

=== Flags
```
-c, --config-file        [Required] Configuration file containing pipeline definition.
-n, --pipeline-name      [Required] Name that will be set to the pipeline.
    --s3-bucket          [Required] Name of the AWS S3 bucket where tfstate file of the cluster will be stored.
    --s3-key-path        [Required] Path in the AWS S3 bucket where tfstate file of the cluster will be stored.
-d, --local-directory    [Required] Local directory of your project (the path should always be using '/' and not '\').
-b, --target-branch                 Name of the branch to which the Pull Request will target. PR is not created if the flag is not provided.
-w                                  Open the Pull Request on the web browser if it cannot be automatically merged. Requires -b flag.
```

=== Example

```
./pipeline_generator.sh -c ./templates/eks/eks-config.cfg -n eks-provisioning --s3-bucket terraformStateBucket --s3-key-path eks/state -d C:/Users/$USERNAME/Desktop/quarkus-project -b develop -w
```

=== Interacting with the cluster

To interact with your cluster, run this command in your terminal:
```
aws eks --region <<region_name>> update-kubeconfig --name <<cluster_name>>
```
