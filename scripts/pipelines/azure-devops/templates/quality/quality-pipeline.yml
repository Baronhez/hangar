trigger:
  branches:
    exclude:
    - '*'

resources:
  pipelines:
  - pipeline: 'Test-Pipeline'
    source: '<@test-pipeline-name@>'
    trigger: true

variables:
  projectPath: $(Pipeline.Workspace)

pool:
  vmImage: ubuntu-latest

steps:

- task: Bash@3
  displayName: 'Getting the last execution of the Test pipeline to check the result of it'
  env:
    AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)
  inputs:
    targetType: inline
    script: 'chmod 755 $(Build.Repository.LocalPath)/.pipelines/scripts/CheckPipelineExec.sh; $(Build.Repository.LocalPath)/.pipelines/scripts/CheckPipelineExec.sh $(testPipelineName) $(Build.SourceVersion)'

- bash: 'echo "The test pipeline executed for this commit has failed.";exit 1'
  displayName: 'Test pipeline failed'
  condition: eq(variables['result'], 'failed')

- bash: 'echo "The test pipeline executed for this commit has been canceled.";exit 1'
  displayName: 'Test pipeline canceled'
  condition: eq(variables['result'], 'canceled')

- bash: 'echo "We could not find any execution of the test pipeline with this commit.";exit 1'
  displayName: 'Test pipeline not found'
  condition: eq(variables['result'], '')

- bash: 'echo "We could not find any execution of the test pipeline with this commit.";exit 1'
  displayName: 'Test pipeline not over'
  condition: eq(variables['result'], 'None')

- task: Bash@3
  displayName: 'Getting the last execution of the Build pipeline to download the right artifact'
  env:
    AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)
  inputs:
    targetType: inline
    script: 'chmod 755 $(Build.Repository.LocalPath)/.pipelines/scripts/CheckPipelineExec.sh; $(Build.Repository.LocalPath)/.pipelines/scripts/CheckPipelineExec.sh $(buildPipelineName) $(Build.SourceVersion)'

- task: DownloadPipelineArtifact@2
  displayName: "Download Artifact"
  inputs:
    source: 'specific'
    project: '$(System.TeamProject)'
    pipeline: '$(buildPipelineName)'
    runVersion: 'specific'
    downloadPath: '$(Pipeline.Workspace)'
    runId: $(runId)

- task: Bash@3
  displayName: "SonarQube Analysis"
  inputs:
    filePath: '$(Build.Repository.LocalPath)/.pipelines/scripts/quality.sh'
    arguments: $(projectPath)
