# Mandatory flags.
mandatoryFalgs="$pipelineName,$localDirectory,$resourceGroupName,$storageAccountName,$storageContainerName,"
# Path to the templates.
templatesPath="scripts/pipelines/azure-devops/templates/aks"
# YAML file name.
yamlFile="aks-provisioning.yml"
# Source branch.
sourceBranch="feature/aks-provisioning"
# Path to the pipelines.
pipelinePath=".pipelines"
# Path to terraform templates.
terraformTemplatesPath="scripts/environment-provisioning/azure/aks"
# Path to terraform scripts.
terraformPath=".terraform/aks"

# Function that copies the terraform scripts into the directory.
function copyScript {
    # Create .terraform/aks folder if it does not exist.
    mkdir -p "${localDirectory}/${terraformPath}"

    # Copy the terraform files.
    cd "${hangarPath}/${terraformTemplatesPath}"
    cp * "${localDirectory}/${terraformPath}"

    # Check if an extra artifact to store is supplied.
    if test ! -z "$artifactPath"
    then
        # Add the extra step to the YAML.
        cat "${hangarPath}/${templatesPath}/store-extra-path.yml" >> "${localDirectory}/${scriptFilePath}/${yamlFile}"
    fi
}

# Function that adds the variables to be used in the pipeline.
function addPipelineVariables {
    # Add the extra artifact to store variable.
    az pipelines variable create --name "artifactPath" --pipeline-name $pipelineName --value ${artifactPath}

    # Add the resource group name variable.
    az pipelines variable create --name "resourceGroupName" --pipeline-name $pipelineName --value ${resourceGroupName}

    # Add the storage account name variable.
    az pipelines variable create --name "storageAccountName" --pipeline-name $pipelineName --value ${storageAccountName}

    # Add the storage container name variable.
    az pipelines variable create --name "storageContainerName" --pipeline-name $pipelineName --value ${storageContainerName}
}