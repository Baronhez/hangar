# Mandatory flags.
mandatoryFlags="$pipelineName,$localDirectory,$language,$buildPipelineName,$qualityPipelineName,"
# Path to the templates.
templatesPath="scripts/pipelines/azure-devops/templates/library-package"
# YAML file name.
yamlFile="library-package-pipeline.yml"
# Script name.
scriptFile="library-package.sh"
# Source branch.
sourceBranch="feature/library-package-pipeline"
# Path to the pipelines.
pipelinePath=".pipelines"
# Path to the scripts.
scriptFilePath=".pipelines/scripts"

#Feed name
if [ "$language" = "node" ]
then
    feed="npm-feed"
else
    feed="maven-feed"
fi

# Function that copies the script to build the application.
function copyScript {
    # Copy the script.
    cp "${hangarPath}/${templatesPath}/${language}-${scriptFile}" "${localDirectory}/${scriptFilePath}/${scriptFile}"

    #Get organization
    cd "${localDirectory}"
    organization=$(git config --get remote.origin.url | cut -d/ -f4)

    #Create PAT
    echo -e "${green}Creating a PAT with necessary permissions..."
    patToken=$(az rest --method post --uri "https://vssps.dev.azure.com/${organization}/_apis/tokens/pats?api-version=7.1-preview.1" --resource "https://management.core.windows.net/" --body '{ "displayName": "libraryDeployToken", "validTo": "2099-02-25T11:44:36.1966667Z", "scope": "vso.packaging_manage" }')
    patToken=$(echo "$patToken" | python -c  "import sys, json; print(json.load(sys.stdin)['patToken']['token'])")

    #Create feed
    if [ "$feed" = "npm-feed" ]
    then
        # TODO Create npm feed
    else
        echo -e "${green}Creating a Maven feed..."
        az rest --method post --uri "https://feeds.dev.azure.com/${organization}/_apis/packaging/feeds?api-version=7.1-preview.1" --resource "https://management.core.windows.net/" --body '{ "name": "'${feed}'" }' 1> /dev/null
    fi

    cd "${hangarPath}/${templatesPath}"
    export feed
    export organization

    #Choose which type of config/settings file is used
    if [ "$language" = "node" ]
    then
        # TODO ?
        email = "placeholder@placeholder.com"
        export email

        encodedPatToken = $(python -c "import base64; print(base64.b64encode('${patToken}'.encode('ascii')).decode('ascii'))")
        export encodedPatToken

        #Create .npmrc
        envsubst < .npmrc.template > "${localDirectory}/${scriptFilePath}/.npmrc"
    else

        export patToken
        #Create settings.xml
        envsubst < settings-template.xml > "${localDirectory}/${scriptFilePath}/settings.xml"
    fi
}

# Function that adds the variables to be used in the pipeline.
function addPipelineVariables {
    # Add the name of the build pipeline name variable.
    az pipelines variable create --name "buildPipelineName" --pipeline-name $pipelineName --value ${buildPipelineName}
    # Add the quality pipeline name as a var of the pipeline.
    az pipelines variable create --name "qualityPipelineName" --pipeline-name $pipelineName --value ${qualityPipelineName}
}
