# Mandatory flags.
mandatoryFlags="$pipelineName,$localDirectory,$language"
# Path to the templates.
templatesPath="scripts/pipelines/azure-devops/templates/library-package"
# YAML file name.
yamlFile="library-package-pipeline.yml"
# Script name.
scriptFile="library-package.sh"
# Source branch.
sourceBranch="feature/library-package-pipeline"
# Path to the pipelines.
pipelinePath=".pipelines"
# Path to the scripts.
scriptFilePath=".pipelines/scripts"
#Feed name
feed="maven-feed"

# Function that copies the script to build the application.
function copyScript {
    # Copy the script.
    cp "${hangarPath}/${templatesPath}/${language}-${scriptFile}" "${localDirectory}/${scriptFilePath}/${scriptFile}"

    # Check if an extra artifact to store is supplied.
    if test ! -z "$artifactPath"
    then
        # Add the extra step to the YAML.
        cat "${hangarPath}/${templatesPath}/store-extra-path.yml" >> "${localDirectory}/${scriptFilePath}/${yamlFile}"
    fi

    #Get organization
    cd "${localDirectory}"
    organization=$(git config --get remote.origin.url | cut -d/ -f4)

    #Create PAT
    echo -e "${green}Creating a PAT with necessary permissions..."
    patToken=$(az rest --method post --uri "https://vssps.dev.azure.com/${organization}/_apis/tokens/pats?api-version=7.1-preview.1" --resource "https://management.core.windows.net/" --body '{ "displayName": "libraryDeployToken", "validTo": "2099-02-25T11:44:36.1966667Z", "scope": "vso.packaging_manage" }')
    patToken=$(echo "$patToken" | python -c  "import sys, json; print(json.load(sys.stdin)['patToken']['token'])")

    #Create feed
    echo -e "${green}Creating a maven feed..."
    az rest --method post --uri "https://feeds.dev.azure.com/${organization}/_apis/packaging/feeds?api-version=7.1-preview.1" --resource "https://management.core.windows.net/" --body '{ "name": "'${feed}'" }' &> /dev/null

    #Create settings.xml
    cd "${hangarPath}/${templatesPath}"
    sed -e "s/\${feed}/$feed/" -e "s/\${organization}/$organization/" -e "s/\${pat}/$patToken/" settings-template.xml | tee "${localDirectory}/${scriptFilePath}/settings.xml"

}

# Function that adds the variables to be used in the pipeline.
function addPipelineVariables {
    # Add the extra artifact to store variable.
    az pipelines variable create --name "artifactPath" --pipeline-name $pipelineName --value ${artifactPath}
    # Add the name of the build pipeline name variable.
    az pipelines variable create --name "buildPipeline" --pipeline-name $pipelineName --value ${buildPipelineName}
    # Add the quality pipeline name as a var of the pipeline.
    az pipelines variable create --name "qualityPipeline" --pipeline-name $pipelineName --value $qualityPipelineName
}