trigger:
  branches:
    include:
    - '*'

resources:
  pipelines:
  - pipeline: 'package-Pipeline'
    source: '<@package-pipeline-name@>'
    trigger:
      branches:
        include:
        - releases/*
        - develop
        - feature/*
        exclude:
        - master
        
variables:
- group: registry_info  
- group: AWS_Credentials 
  
pool:
  vmImage: ubuntu-latest

jobs:
- job: Deploy_to_AKS
  variables:
  - group: aks-variables # DNS available for this job
  steps:
  - task: DownloadPipelineArtifact@2
    condition: eq(variables.deployCluster, 'AKS')
    displayName: "Download AKS Kubeconfig"
    inputs:
      source: 'specific'
      project: '$(System.TeamProject)'
      pipeline: '$(aksProvisionPipelineName)'
      runVersion: 'latest'
      downloadPath: '$(Pipeline.Workspace)' 
    
  - task: Bash@3
    condition: eq(variables.deployCluster, 'AKS')
    displayName: "Deploy app to AKS" 
    inputs:
      targetType: 'inline'
      script: |
        # Add image name and ingress DNS name.
        export image=$(imagename) dns=$(dns_name)
        yq eval '.spec.template.spec.containers[0].image = "'$image'"' -i $(Build.Repository.LocalPath)/$(deployFiles)/*-deployment.yaml 
        yq eval '.spec.rules[0].host = "'$dns'"' -i $(Build.Repository.LocalPath)/$(deployFiles)/ingress.yaml
        # Create namespace in AKS cluster.
        kubectl create namespace $(k8sNamespace) --kubeconfig $(Pipeline.Workspace)/kubeconfig/kubeconfig
        # Apply manifest files.
        kubectl apply -f $(Build.Repository.LocalPath)/$(deployFiles) --namespace=$(k8sNamespace) --kubeconfig $(Pipeline.Workspace)/kubeconfig/kubeconfig
          
- job: Deploy_to_EKS
  variables:
  - group: eks_variables # DNS available for this job
  steps:
  - task: Bash@3
    condition: eq(variables.deployCluster, 'EKS')
    displayName: "Deploy app to EKS"
    inputs:
      targetType: 'inline'
      script: |
        # connecting to EKS cluster using accesskey and secrets key, Update kubeconfig context.
        aws configure set aws_access_key_id $(ACCESS_KEY)
        aws configure set aws_secret_access_key $(SECRET_KEY)
        aws eks update-kubeconfig --name $(CLUSTER_NAME) --region $(REGION)
        # Add image name and ingress DNS name.
        export image=$(imagename) dns=$(dns_name)
        yq eval '.spec.template.spec.containers[0].image = "'$image'"' -i $(Build.Repository.LocalPath)/$(deployFiles)/*-deployment.yaml 
        yq eval '.spec.rules[0].host = "'$dns'"' -i $(Build.Repository.LocalPath)/$(deployFiles)/ingress.yaml
        # Create namespace in EKS cluster.
        kubectl create namespace $(k8sNamespace) 
        # Apply manifest files.
        kubectl apply -f $(Build.Repository.LocalPath)/$(deployFiles) --namespace=$(k8sNamespace) 



