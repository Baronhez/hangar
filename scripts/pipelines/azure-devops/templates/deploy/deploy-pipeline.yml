trigger:
  branches:
    include:
    - '*'

resources:
  pipelines:
  - pipeline: 'Package-Pipeline'
    source: '<@package-pipeline-name@>'
    trigger:
      branches:
      include:
          - releases/*
          - develop
          exclude:
          - feature/*
          - master

variables:
- group: registry_info
- group: AKS_DNS
- group: AWS_Credentials
- group: AWS_DNS
- name: k8sNamespace
  value: hangar  
  
pool:
  vmImage: ubuntu-latest

steps:
- task: DownloadPipelineArtifact@2
  condition: eq(variables.deployCluster, 'AKS')
  displayName: "Download Kubeconfig"
  inputs:
    source: 'specific'
    project: '$(System.TeamProject)'
    pipeline: '$(aksProvisionPipeline)'
    runVersion: 'latest'
    downloadPath: '$(Pipeline.Workspace)' 
  
- task: Bash@3
  condition: eq(variables.deployCluster, 'AKS')
  displayName: "Apply AKS"
  inputs:
    targetType: 'inline'
    script: |
      export image=$(imagename) DNSName=$(DNSName)
      yq eval '.spec.template.spec.containers[0].image = "'$image'"' -i $(Build.Repository.LocalPath)/k8s/*-deployment.yaml 
      yq eval '.spec.rules[0].host = "'$DNSName'"' -i $(Build.Repository.LocalPath)/k8s/ingress.yaml
      kubectl create namespace $(k8sNamespace) --kubeconfig $(Pipeline.Workspace)/kubeconfig/kubeconfig
      kubectl apply -f $(Build.Repository.LocalPath)/k8s --namespace=$(k8sNamespace) --kubeconfig $(Pipeline.Workspace)/kubeconfig/kubeconfig
        

- task: Bash@3
  condition: eq(variables.deployCluster, 'EKS')
  displayName: Apply EKS
  inputs:
    targetType: 'inline'
    script: |
      aws configure set aws_access_key_id $(ACCESS_KEY)
      aws configure set aws_secret_access_key $(SECRET_KEY)
      aws eks update-kubeconfig --name $(CLUSTER_NAME) --region $(REGION)
      export image=$(imagename) DNSName=$(DNSName)
      yq eval '.spec.template.spec.containers[0].image = "'$image'"' -i $(Build.Repository.LocalPath)/k8s/*-deployment.yaml 
      yq eval '.spec.rules[0].host = "'$DNSName'"' -i $(Build.Repository.LocalPath)/k8s/ingress.yaml
      kubectl create namespace $(k8sNamespace) 
      kubectl apply -f $(Build.Repository.LocalPath)/k8s --namespace=$(k8sNamespace) 


