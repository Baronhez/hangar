trigger: none

resources:
  pipelines:
  - pipeline: 'Package-Pipeline'
    source: '$packagePipelineName'
    trigger:
      branches:
        include:
        - 'release/*'
        - develop
        exclude:
        - 'feature/*'
        - master

variables:
  - group: registry_info 
  - group: AWS_Credentials
  - name: deploymentYamlPath
    value: "$(Build.Repository.LocalPath)/$(deployFiles)/*-deployment.yaml" 
  - name: ingressYamlPath
    value: "$(Build.Repository.LocalPath)/$(deployFiles)/ingress.yaml"  
  - name: deployFilesPath
    value: "$(Build.Repository.LocalPath)/$(deployFiles)"
  - name: kubeconfigPath
    value: "$(Pipeline.Workspace)/kubeconfig/kubeconfig" 
    
pool:
  vmImage: ubuntu-latest

jobs:
- job: Deploy_to_AKS
  condition: eq(variables.deployCluster, 'AKS')
  variables:
  - group: aks-variables # DNS available for this job
  steps:
  - task: DownloadPipelineArtifact@2
    displayName: "Download AKS Kubeconfig"
    inputs:
      source: 'specific'
      project: '$(System.TeamProject)'
      pipeline: '$(aksProvisionPipelineName)'
      runVersion: 'latest'
      downloadPath: '$(Pipeline.Workspace)' 
    
  - task: Bash@3
    displayName: "Deploy app to AKS" 
    inputs:
      filePath: '$(Build.Repository.LocalPath)/.pipelines/scripts/aks-deploy.sh'
      arguments: '$(imagename) $(dns_name) $(deploymentYamlPath) $(ingressYamlPath) $(deployFilesPath) $(k8sNamespace) $(kubeconfigPath)'
  
  - task: Bash@3
    condition: and(eq(variables.deployCluster, 'AKS'), ne(variables.secretsName, ''))
    displayName: 'create secrets for AKS'
    inputs:
      filePath: '$(Build.Repository.LocalPath)/.pipelines/scripts/acr-secrets.sh'
      arguments: '$(k8sNamespace) $(secretsName) $(docker_username) $(docker_password) $(registry) $(deploymentYamlPath) $(kubeconfigPath)'
 
- job: Deploy_to_EKS
  condition: eq(variables.deployCluster, 'EKS')
  variables:
  - group: eks_variables # DNS available for this job
  steps:
  - task: Bash@3
    displayName: Connect to EKS
    inputs:
      targetType: 'inline'
      script: |
        # connecting to EKS cluster using accesskey and secrets key, Update kubeconfig context.
        aws configure set aws_access_key_id $(ACCESS_KEY)
        aws configure set aws_secret_access_key $(SECRET_KEY)
        aws eks update-kubeconfig --name $(CLUSTER_NAME) --region $(REGION)
        
  - task: Bash@3
    displayName: Deploy app to EKS
    inputs:
      filePath: '$(Build.Repository.LocalPath)/.pipelines/scripts/eks-deploy.sh'
      arguments: '$(k8sNamespace) $(imagename) $(dns_name) $(deploymentYamlPath) $(ingressYamlPath) $(deployFilesPath)'

  - task: Bash@3
    condition: and(eq(variables.deployCluster, 'EKS'), ne(variables.secretsName, ''))
    displayName: 'Create secrets for EKS'
    inputs:
      filePath: '$(Build.Repository.LocalPath)/.pipelines/scripts/ecr-secrets.sh'
      arguments: '$(k8sNamespace) $(secretsName) $(aws_access_key) $(aws_secret_access_key) $(registry) $(deploymentYamlPath)'

  

  
