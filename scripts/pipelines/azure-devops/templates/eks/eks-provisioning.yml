trigger:
- none

pool:
  vmImage: ubuntu-latest

variables:
- group: AWS_Credentials
- name: terraformWorkingDirectory
  value: '$(System.DefaultWorkingDirectory)/.terraform/eks'

steps:

- task: TerraformInstaller@0
  displayName: 'Install Terraform latest'
  inputs:
    terraformVersion: 'latest' 

- task: TerraformTaskV2@2
  displayName: 'Terraform : init'
  inputs:
    provider: 'aws'
    command: 'init'
    workingDirectory: "$(terraformWorkingDirectory)"
    backendServiceAWS: "$(awsServiceConnection)"
    backendAWSBucketName: "$(s3Bucket)"
    backendAWSKey: "$(s3KeyPath)"

- task: TerraformTaskV2@2
  displayName: 'Terraform : apply'
  name: terraformApply
  inputs:
    provider: aws
    command: apply
    commandOptions: '-var cluster_name=$(clustername)'
    workingDirectory: "$(terraformWorkingDirectory)"
    environmentServiceNameAWS: "$(awsServiceConnection)"

- task: Bash@3
  displayName: 'Install ingress controller and Publish DNS'
  env:
    AZURE_DEVOPS_EXT_PAT: $(PAT)
  inputs:
    targetType: inline
    script: |
      # Connect to EKS using credentials
      aws configure set aws_access_key_id $(ACCESS_KEY)
      aws configure set aws_secret_access_key $(SECRET_KEY)
      aws eks update-kubeconfig --name $(clustername) --region $(REGION)
      helm repo add bitnami https://charts.bitnami.com/bitnami
      helm repo update
      helm upgrade --install nginx-ingress nginx-ingress-controller --set ingressClassResource.default=true --set containerSecurityContext.allowPrivilegeEscalation=false --repo https://charts.bitnami.com/bitnami --namespace nginx-ingress --create-namespace
      dnsName=$(kubectl get svc --namespace nginx-ingress nginx-ingress-nginx-ingress-controller -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
      az pipelines variable-group create --organization $(System.TeamFoundationCollectionUri) --project "$(System.TeamProject)" --name eks_variables --variable dns_name=$dnsName cluster_name=$(clustername) --authorize true	
