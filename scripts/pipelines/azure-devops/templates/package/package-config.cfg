# Path to the templates.
templatesPath="scripts/pipelines/azure-devops/templates/package"
# YAML file name.
yamlFile="package-pipeline.yml"
# Script name.
scriptFile="package.sh"
# Source branch.
sourceBranch="feature/package-pipeline"
# Path to the pipelines.
pipelinePath=".pipelines"
# Path to the scripts.
scriptFilePath=".pipelines/scripts"
# Mandatory flags
mandatoryFlags="$imageName,$dockerUser,$dockerPassword,$buildPipelineName,$language,"
#Dockerfile Paths depending on the langage
dockerfilePaths="quarkus:src/main/docker/Dockerfile.jvm test:path1 test2:path2"


# Function that copies the terraform scripts into the directory.
function copyScript {

    # Copy the scripts needed for the execution of the pipeline.
    cp "${hangarPath}/${templatesPath}/package.sh" "${localDirectory}/${scriptFilePath}/package.sh"
    cp "${hangarPath}/${templatesPath}/CheckPipelineExec.sh" "${localDirectory}/${scriptFilePath}/CheckPipelineExec.sh"
}

function addPipelineVariables {

    # We set the path to the dockerfile depending on the language given.
    for i in $dockerfilePaths
    do
      echo $i | grep $language && dockerfile=$(echo $i | cut -d':' -f2)
      break
    done

    # We get the name of the registry from the full image name
    registry=$(echo $imageName | cut -d'/' -f1)

    # We create a variable group so the registry and the credentials to acces it are available for every pipelines
    az pipelines variable-group create --name registry_info --variable registry="$registry" imagename="$imageName" --authorize true > ./tmp_group_var
    group_id=$(cat  ./tmp_group_var | grep '"id"' | cut -d: -f2 | cut -d, -f1 | tr -d \")
    rm ./tmp_group_var
    az pipelines variable-group variable create --group-id $group_id --name docker_username --value "$dockerUser" --secret true
    az pipelines variable-group variable create --group-id $group_id --name docker_password --value "$dockerPassword" --secret true

    # Add the build pipeline name as a var of the pipeline.
    az pipelines variable create --name "BuildPipeline" --pipeline-name $pipelineName --value $buildPipelineName

    # Add the path to the dockerFile as a var of the pipeline.
    az pipelines variable create --name "relativeDockerfilePath" --pipeline-name $pipelineName --value $dockerfile

    # Add the quality pipeline name as a var of the pipeline.
    az pipelines variable create --name "qualityPipeline" --pipeline-name $pipelineName --value $qualityPipeline

}
