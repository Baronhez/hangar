# Mandatory flags.
# For language and Dockerfile, we put them in the same field because we need one of them (same for user/password with aws credentials).
if test -z $awsAccessKey
then
    mandatoryFlags="$imageName,${dockerUser},${dockerPassword},${language}${dockerFile},$qualityPipelineName,"
else
    mandatoryFlags="$imageName,${awsAccessKey},${awsSecretAccessKey},${awsRegion},${language}${dockerFile},$qualityPipelineName,"
fi
# Path to the templates.
templatesPath="scripts/pipelines/github/templates/package"
# YAML file name.
yamlFile="package-pipeline.yml"
# Script name.
scriptFile="package.sh"
# Path to the pipelines.
pipelinePath=".github/workflows"
# Path to the scripts.
scriptFilePath=".github/workflows/scripts"
# Source branch.
sourceBranch="feature/package-pipeline"
# DockerFile paths depending on the language.
dockerfilePaths="quarkus-jvm:src/main/docker/Dockerfile.jvm quarkus:src/main/docker/Dockerfile.native node:Dockerfile"

function copyScript {
    # Copy the scripts needed for the execution of the pipeline.
    cp "${hangarPath}/${templatesPath}/${language}-${scriptFile}" "${localDirectory}/${scriptFilePath}/${scriptFile}"
}

function addPipelineVariables {
    # Set the path to the Dockerfile based on the language.
    if test -z ${dockerFile}
    then
        for i in $dockerfilePaths
        do
            echo $i | grep $language > /dev/null && dockerFile=$(echo $i | cut -d':' -f2)
            break
        done
    fi

    # Get the name of the registry from the full image name.
    firstPartImage=$(echo $imageName | cut -d'/' -f1)
    (echo $firstPartImage | grep "\." > /dev/null && registry=$firstPartImage) || registry="docker.io"

    # Set variables in YAML file.
    if test ! -z $awsAccessKey
    then
        isECR="true"
        export isECR
    fi
    export dockerFile settingsFile registry imageName awsRegion
    envsubst '${dockerFile},${settingsFile},${registry},${imageName},${awsRegion},${isECR}' < "${hangarPath}/${templatesPath}/${yamlFile}.template"
    

    # Get the repo name.
    repoURL=$(git config --get remote.origin.url)
    repoNameWithGit="${repoURL/https:\/\/github.com\/}"
    repoName="${repoNameWithGit/.git}"

    # Add secrets.
    if test -z $awsAccessKey
    then
        gh secret set DOCKER_USER -a actions -b "$dockerUser" -R "$repoName"
        gh secret set DOCKER_PASSWORD -a actions -b "$dockerPassword" -R "$repoName"
    else
        gh secret set AWS_ACCESS_KEY -a actions -b "$awsAccessKey" - R "$repoName"
        gh secret set AWS_SECRET_ACCESS_KEY -a actions -b "$awsSecretAccessKey" -R "$repoName"
    fi
}